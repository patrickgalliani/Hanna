#! /usr/bin/env python
# Original implementation by: nivbend (GitHub)

from __future__ import print_function
from subprocess import check_output, CalledProcessError
from os.path import isfile

import logging

logging.basicConfig(
    format="%(asctime)-15s %(levelname)s: %(message)s", level=logging.INFO
)
log = logging.getLogger("pre-push")

(SUCCESS, TYPE_CHECK_ERROR, UNIT_TEST_ERROR) = range(3)


def run():
    """
    Run the unit tests for all source code modules.
    """
    src_modules = [
        "security",
        "holding",
        "asset_class",
        "portfolio",
        "purchase",
        "deposit",
        "util",
        "load"
    ]
    test_modules = [
        "security",
        "holding",
        "asset_class",
        "portfolio",
        "purchase",
        "deposit",
        "util",
    ]
    for mod in src_modules:
        log.info("Running {} type checks".format(mod))
        try:
            type_check = check_output(
                [
                    "mypy",
                    "--ignore-missing-imports",
                    "src/{}.py".format(mod)
                ]
            )
        except CalledProcessError:
            log.error("{} type checks failed".format(mod))
            log.error("mypy --ignore-missing-imports src/{}.py".format(mod))
            return TYPE_CHECK_ERROR

    for mod in test_modules:
        log.info("Running {} unit tests".format(mod))
        try:
           test_status = check_output(
                [
                    "python3",
                    "-m",
                    "unittest",
                    "--verbose",
                    "test.{}".format(mod),
                ]
            )
        except CalledProcessError:
            log.error("{} unit tests failed".format(mod))
            return UNIT_TEST_ERROR

    return SUCCESS


if __name__ == "__main__":
    exit(run())
