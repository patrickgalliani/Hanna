#! /usr/bin/env python
# Original implementation by: nivbend (GitHub)

from __future__ import print_function
from subprocess import check_output, CalledProcessError

import logging
import os

logging.basicConfig(
    format="%(asctime)-15s %(levelname)s: %(message)s", level=logging.INFO
)
log = logging.getLogger("pre-commit")

ERR_LOG_FILE = "pre-commit-err.log"
(
    SUCCESS,
    GIT_DIFF_ERROR,
    BLACK_ERROR,
    BLACK_REFORMATTED_ERROR,
    FLAKE8_ERROR,
) = range(5)


def run():
    """
    Verify the code style for all the changed Python files using flake8.
    """
    log.info("Running pre-commit formatter (black) and style checks (flake8)")
    # Get all changed file paths.
    try:
        changed_files = check_output(
            ["git", "diff", "--staged", "--name-only", "HEAD"]
        )
    except CalledProcessError:
        log.error("Couldn't get list of changed files")
        return GIT_DIFF_ERROR

    # Limit checks to python scripts only
    changed_python_files = []
    for f in changed_files.splitlines():
        f_str = f.decode()
        if f_str.endswith(".py"):
            changed_python_files.append(f_str)

    for f in changed_python_files:
        try:
            log.info("\t{}".format(f))
            log.info("\t\t- Formatting with black")
            with open(ERR_LOG_FILE, "w") as err_log_w:
                check_output(["black", f, "-l", "79"], stderr=err_log_w)
        except CalledProcessError as error:
            with open(ERR_LOG_FILE, "r") as err_log_r:
                err_data = err_log_r.read()
                log.error(err_data)
            log.error("black formatter failed: {}".format(error))
            return BLACK_ERROR
        with open(ERR_LOG_FILE, "r") as err_log_r:
            err_data = err_log_r.read()
            if "reformatted" in err_data:
                return BLACK_REFORMATTED_ERROR

        try:
            log.info("\t\t- Verifying style with flake8")
            check_output(["python3", "-m", "flake8", f])
        except CalledProcessError as error:
            log.error("flake8 style checker failed: {}".format(error))
            return FLAKE8_ERROR

    log.info("Success!")
    return SUCCESS


if __name__ == "__main__":
    run_val = run()
    if run_val == GIT_DIFF_ERROR:
        log.error("git diff error")
    elif run_val == BLACK_ERROR:
        log.error("black error")
    elif run_val == BLACK_REFORMATTED_ERROR:
        log.error("black reformatted")
    elif run_val == FLAKE8_ERROR:
        log.error("flake8 error")
    exit(run_val)
